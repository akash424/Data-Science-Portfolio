filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)==1, .5*diff, .25*diff[1]+.75*diff[2]),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
last3_seasons <- all.season %>%
filter(GP.x >= 30) %>%
filter(SEASON %in% season[21:23]) %>%
arrange(PLAYER, SEASON) %>%
group_by(PLAYER) %>%
filter(n()>1) %>%
slice((n()-2):n()) %>%
mutate(diff = Adj.Reg.Score - lag(Adj.Reg.Score, default = first(Adj.Reg.Score)))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)==1, .5*diff, .25*diff[1]+.75*diff[2]),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), sum(diff), ifelse(length(diff)==1, diff, .5*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1, diff, .5*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1, diff, .25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1|diff[1]<0, .75*max(diff),.25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1|diff[1]<0, .75*max(diff),.25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1, .75*max(diff),.25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
calcPerformance <- function(x, y) {
library(readxl)
library(dplyr)
vars.to.keep <- c("PLAYER", "TEAM", "GP", "W", "MIN", "POSS", "OPP POSS", "TOT TM PTS", "TOT OPP PTS", 'PTS', 'FGA', 'REB', 'AST', 'TOV', 'OFFRTG', 'DEFRTG')
trd <- read_excel(x, sheet = "traditional")
adv <- read_excel(x, sheet = "advanced")
trd <- subset(trd, select=-c(FP,DD2,TD3))
adv <- subset(adv, select =-MIN)
Rdf <- merge(trd, adv, by = names(trd)[1:6])
Rdf$POSS <- round(Rdf$PACE * Rdf$MIN/48 , 0)
Rdf$`TOT TM PTS` <- round(Rdf$OFFRTG * Rdf$PACE * Rdf$MIN/4800, 0)
Rdf$`TOT OPP PTS` <- Rdf$`TOT TM PTS` - Rdf$`+/-`
Rdf$`OPP POSS` <- round(100*Rdf$`TOT OPP PTS`/Rdf$DEFRTG, 0)
Rdf[is.na(Rdf)] <- 0
Rdf <- Rdf[!is.infinite(rowSums(Rdf[,3:ncol(Rdf)])),]
Rdata <- Rdf[vars.to.keep]
for (i in 1:nrow(Rdata)) {
Rdata$PTS[i] <- (Rdf$PTS[i]/Rdf$POSS[i]) / (sum(Rdf$PTS[-i])/sum(Rdf$POSS[-i]))
Rdata$FGA[i] <- (Rdf$FGA[i]/Rdf$POSS[i]) / (sum(Rdf$FGA[-i])/sum(Rdf$POSS[-i]))
Rdata$REB[i] <- (Rdf$REB[i]/Rdf$POSS[i]) / (sum(Rdf$REB[-i])/sum(Rdf$POSS[-i]))
Rdata$AST[i] <- (Rdf$AST[i]/Rdf$POSS[i]) / (sum(Rdf$AST[-i])/sum(Rdf$POSS[-i]))
Rdata$TOV[i] <- (Rdf$TOV[i]/Rdf$POSS[i]) / (sum(Rdf$TOV[-i])/sum(Rdf$POSS[-i]))
Rdata$OFFRTG[i] <- Rdf$OFFRTG[i] / (100*sum(Rdf$`TOT TM PTS`[-i])/sum(Rdf$POSS[-i]))
Rdata$DEFRTG[i] <- Rdf$DEFRTG[i] / (100*sum(Rdf$`TOT OPP PTS`[-i])/sum(Rdf$`OPP POSS`[-i]))
}
Rdata$max_g <- ifelse(max(Rdata$GP) > 82, 82, max(Rdata$GP))
Rdata$`g%` <- ifelse(Rdata$GP > Rdata$max_g, 1, Rdata$GP/Rdata$max_g)
Rdata$Reg.Score <- 0.275 * Rdata$PTS - 0.1 * Rdata$FGA + 0.04 * Rdata$REB + 0.04 * Rdata$AST - 0.03 * Rdata$TOV
Rdata$Adj.Reg.Score <- ifelse(Rdata$Reg.Score>0, sqrt(sqrt(.01+Rdata$`g%`)) * Rdata$Reg.Score,
sqrt(sqrt(1.01-Rdata$`g%`)) * Rdata$Reg.Score)
all.reg <- merge(Rdata[c('PLAYER', 'Adj.Reg.Score', 'Reg.Score', 'TEAM', 'max_g')], Rdf[,1:(ncol(Rdf)-4)], by = c("PLAYER", "TEAM"))
#---
trd <- read_excel(y, sheet = "traditional")
adv <- read_excel(y, sheet = "advanced")
trd <- subset(trd, select=-c(FP,DD2,TD3))
adv <- subset(adv, select =-MIN)
Pdf <- merge(trd, adv, by = names(trd)[1:6])
Pdf$POSS <- round(Pdf$PACE * Pdf$MIN/48 , 0)
Pdf$`TOT TM PTS` <- round(Pdf$OFFRTG * Pdf$PACE * Pdf$MIN/4800, 0)
Pdf$`TOT OPP PTS` <- Pdf$`TOT TM PTS` - Pdf$`+/-`
Pdf$`OPP POSS` <- round(100*Pdf$`TOT OPP PTS`/Pdf$DEFRTG, 0)
Pdf[is.na(Pdf)] <- 0
Pdf <- Pdf[!is.infinite(rowSums(Pdf[,3:ncol(Pdf)])),]
Pdata <- Pdf[vars.to.keep]
for (i in 1:nrow(Pdata)) {
Pdata$PTS[i] <- (Pdf$PTS[i]/Pdf$POSS[i]) / (sum(Rdf$PTS)/sum(Rdf$POSS))
Pdata$FGA[i] <- (Pdf$FGA[i]/Pdf$POSS[i]) / (sum(Rdf$FGA)/sum(Rdf$POSS))
Pdata$REB[i] <- (Pdf$REB[i]/Pdf$POSS[i]) / (sum(Rdf$REB)/sum(Rdf$POSS))
Pdata$AST[i] <- (Pdf$AST[i]/Pdf$POSS[i]) / (sum(Rdf$AST)/sum(Rdf$POSS))
Pdata$TOV[i] <- (Pdf$TOV[i]/Pdf$POSS[i]) / (sum(Rdf$TOV)/sum(Rdf$POSS))
Pdata$OFFRTG[i] <- Pdf$OFFRTG[i] / (100*sum(Rdf$`TOT TM PTS`)/sum(Rdf$POSS))
Pdata$DEFRTG[i] <- Pdf$DEFRTG[i] / (100*sum(Rdf$`TOT OPP PTS`)/sum(Rdf$`OPP POSS`))
}
Pdata$max_w <- max(Pdata$W, na.rm = TRUE)
Pdata$Pl.Score <- 0.275 * Pdata$PTS - 0.1 * Pdata$FGA + 0.04 * Pdata$REB + 0.04 * Pdata$AST - 0.03 * Pdata$TOV + 0.2 * Pdata$OFFRTG - 0.5 * Pdata$DEFRTG
Pdata$Adj.Pl.Score <- ifelse(Pdata$Pl.Score>0, (.01+Pdata$W/Pdata$max_w) * Pdata$Pl.Score,
(1.01-(Pdata$W/Pdata$max_w)) * Pdata$Pl.Score)
all.pl <- merge(Pdata[c('PLAYER', 'Adj.Pl.Score', 'Pl.Score', 'TEAM', 'max_w')], Pdf[,1:(ncol(Rdf)-4)], by = c("PLAYER", "TEAM"))
#---
full_season.stats <<- merge(all.reg, all.pl, by=c('PLAYER', 'TEAM'), all = TRUE)
full_season.stats$Tot.Score <<- ifelse(full_season.stats$Pl.Score < 0 | is.na(full_season.stats$Pl.Score) == TRUE,
0.5*full_season.stats$Adj.Reg.Score,
0.5*full_season.stats$Adj.Reg.Score + full_season.stats$Adj.Pl.Score)
full_season.stats <<- full_season.stats[order(-full_season.stats$Tot.Score) , ]
full_season.stats$`SEASON RK` <<- 1:nrow(full_season.stats)
scaled.data <<- merge(Rdata, Pdata, by = c("PLAYER", 'TEAM'), all = TRUE)
scaled.data$Tot.Score <<- ifelse(scaled.data$Pl.Score < 0 | is.na(scaled.data$Pl.Score) == TRUE,
0.5*scaled.data$Adj.Reg.Score,
0.5*scaled.data$Adj.Reg.Score + scaled.data$Adj.Pl.Score)
}
num <- c("97", "98", "99", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19")
all.season <- all.scaled <- vector("list", length = length(num))
names(all.season) <- names(all.scaled) <- num
for(i in 1:length(num)){
calcPerformance( paste0("/Users/Akash/Documents/Data Science/",num[i],"_totals.xlsx") , paste0("/Users/Akash/Documents/Data Science/",num[i],"_pl.xlsx") )
all.season[[i]] <- full_season.stats
all.scaled[[i]] <- scaled.data
}
season <- c("1996-97", "1997-98", "1998-99", "1999-00", "2000-01", "2001-02", "2002-03", "2003-04", "2004-05", "2005-06", "2006-07", "2007-08",
"2008-09", "2009-10", "2010-11", "2011-12", "2012-13", "2013-14", "2014-15", "2015-16", "2016-17", "2017-18", "2018-19")
for (i in 1:length(season)) {
all.season[[i]]$SEASON <- season[i]
all.scaled[[i]]$SEASON <- season[i]
}
all.season <- do.call("rbind", all.season)
all.scaled <- do.call("rbind", all.scaled)
ranked.list <- all.season %>%
filter(GP.x >= 0.6*max_g & MIN.x/GP.x >= 15) %>%
arrange(desc(Tot.Score)) %>%
select(c(1,87:89,2:86))
filtered_season_data <- vector("list", length = length(season))
for (i in 1:length(season)) {
filtered_season_data[[i]] <- ranked.list %>%
filter(SEASON == season[i]) %>%
arrange(desc(Adj.Reg.Score)) %>%
mutate(Reg.Rk = 1:n()) %>%
arrange(desc(Tot.Score)) %>%
mutate(Tot.Rk = 1:n()) %>%
select(-`SEASON RK`)
}
ranked.list <- do.call("rbind", filtered_season_data)
ranked.list <- ranked.list %>%
arrange(desc(Tot.Score))
last3_seasons <- all.season %>%
filter(GP.x >= 30) %>%
filter(SEASON %in% season[21:23]) %>%
arrange(PLAYER, SEASON) %>%
group_by(PLAYER) %>%
filter(n()>1) %>%
slice((n()-2):n()) %>%
mutate(diff = Adj.Reg.Score - lag(Adj.Reg.Score, default = first(Adj.Reg.Score)))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1, .75*max(diff),.25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
View(last3_seasons)
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(length(diff)>1 & all(diff>0), .25*diff[1] + .75*diff[2], ifelse(length(diff)==1, .75*max(diff),.25*max(diff))),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0)
View(last3_seasons)
all(last3_seasons$diff>0)
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(any(SEASON=="2018-19"), diff[SEASON=="2018-19"], max(diff)*.5),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
filter(best_score < .05) %>%
arrange(desc(rating))
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER)
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(any(SEASON=="2018-19"), diff[SEASON=="2018-19"], max(diff)*.5),
best_score = max(Adj.Reg.Score),
rating = improvement*1.5 + best_score) %>%
arrange(desc(rating))
View(best_improvement)
best_improvement <- last3_seasons %>%
filter(diff != 0) %>%
group_by(PLAYER) %>%
summarise(best_year = toString(SEASON[which.max(diff)]), diff_by_year = toString(diff),
improvement = ifelse(any(SEASON=="2018-19"), diff[SEASON=="2018-19"], max(diff)*.5),
best_score = max(Adj.Reg.Score),
rating = improvement*2 + best_score) %>%
arrange(desc(rating))
source('~/Documents/Data Science/bestPasser Function.R', echo=TRUE)
View(best.passer)
View(passing)
View(all.season)
View(all.season)
View(passing)
View(best.passer)
library(rsconnect)
deployApp()
getwd()
cd("/Documents/Schoolwork/Patient Volume Visualization")
setwd("/Documents/Schoolwork/Patient Volume Visualization")
setwd("Documents/Schoolwork/Patient Volume Visualization")
getwd()
deployApp()
trd <- read_excel("Documents/Data Science/data_player_profile.xlsx", sheet = "traditional")
getwd()
trd <- read_excel("Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "traditional")
trd <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "traditional")
adv <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "advanced")
usg <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "touches")
pass <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "passing")
bio <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "bios")
shot <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "pullUp")
drive <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "drive")
iso <- read_excel("/Users/Akash/Documents/Data Science/data_player_profile.xlsx", sheet = "ISO")
library(dplyr)
iso <- iso %>%
group_by(PLAYER) %>%
summarise_at(3:17, sum, na.rm =TRUE)
set <- list(trd, adv, usg, pass, bio, shot, drive, iso)
df <- Reduce(function(x, y) merge(x, y, by = "PLAYER"), set)
df$POSS_all <- round(df[,49] * (df[,7]/48), 0)
data <- data.frame(
PLAYER = df[,1],
GP = df[,4],
MIN = df[,7],
HEIGHT = df[,86],
`POSS PER GAME` = df[,153]/df[,4],
`USG%` = df[,48],
`TIME PER POSS (sec)` = round(60*(df[,59]/df[,52])/(df[,153]/df[,4]),1),
`3PA%` = df[,13]/df[,10],
`PULL UP FGA%` = (df[,110]/df[,104])/(df[,10]/df[,4]),
`DRIVE FGA%` = (df[,123]/df[,117])/(df[,10]/df[,4]),
`ISO FGA%` = (df[,144]/df[,138])/(df[,10]/df[,4]),
`REB%` = df[,44],
`POTENTIAL AST PER POSS` = (df[,78]/df[,70])/(df[,153]/df[,4]),
`PTS PER POSS USED` = df[,8] / (df[,153] * (df[,48]/100)),
`3P%` = df[,12]/df[,13]
)
scaled.dat <- data
scaled.dat[,4:15] <- scale(data[,4:15])
library(metricsgraphics)
dat.pc <- prcomp(data[,c(4:13)], center = FALSE, scale. = FALSE)$x %>% as.data.frame()
set.seed(19)
km.cluster <- kmeans(data[,c(4:13)], centers = 6, iter.max = 100, nstart = 100)
dat.pc$kmeans.cluster <- km.cluster$cluster
library(iRF)
rf.fit <- iRF::randomForest(x = data[,c(4:13)], y = NULL, ntree = 10000, proximity = TRUE, oob.prox = TRUE, mtry.select.prob = c(1, 0.5, 0.5, 0.5, 1.5, 2, 1, .05, 1, 1.5))
hclust.rf <- hclust(as.dist(1-rf.fit$proximity), method = "ward.D2")
rf.cluster = cutree(hclust.rf, k=100)
dat.pc$rf.clusters <- rf.cluster
mjs_plot(dat.pc, x=PC1, y=PC2) %>%
mjs_point(color_accessor=rf.clusters) %>%
mjs_labs(x="principal comp 1", y="principal comp 2")
data$group <- rf.cluster
View(data)
library(readxl)
library(dplyr)
bestPasser <- function(y) {
trd <- read_excel(y, sheet = "traditional")
adv <- read_excel(y, sheet = "advanced")
df <- merge(trd, adv, by = names(trd)[1:6])
stats <<- df
result <- df[,c(1:8,21,43:44)]
result$`POSS` <- round(df$MIN.x/48 * df$PACE, 0)
result$`POSS USED` <- round(result$`USG%`/100 * result$POSS, 0)
result$`EMPTY POSS` <- result$POSS - result$`POSS USED`
result$`AST RATE` <- result$AST / result$`EMPTY POSS`
result$lgEff <- NA
for (n in 1:nrow(df)) {
result$lgEff[n] <- sum(result$AST[-n])/sum(result$`EMPTY POSS`[-n])
}
result$`PASS EFF` <- result$AST - result$lgEff*result$`EMPTY POSS`
result$AST_adj <- result$AST + result$`PASS EFF`
result$APG_adj <- result$AST_adj/result$GP
result$APG <- result$AST/result$GP
qual <- subset(result, result$MIN > 0.2*max(result$MIN, na.rm = TRUE))
qual <- qual[order(-qual$APG_adj) , ]
rownames(qual) <- 1:nrow(qual)
qual$`SEASON RK` <- 1:nrow(qual)
final <<- qual
}
num <- c("97", "98", "99", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
"11", "12", "13", "14", "15", "16", "17", "18", "19")
final_list <- vector("list", length = length(num))
names(final_list) <- num
for(i in 1:length(num)){
bestPasser( paste0("/Users/Akash/Documents/Data Science/",num[i],"_totals.xlsx") )
final_list[[i]] <- final
}
season <- c("1996-97", "1997-98", "1998-99", "1999-00", "2000-01", "2001-02", "2002-03", "2003-04", "2004-05", "2005-06", "2006-07", "2007-08",
"2008-09", "2009-10", "2010-11", "2011-12", "2012-13", "2013-14", "2014-15", "2015-16", "2016-17", "2017-18", "2018-19")
for (i in 1:length(season)) {
final_list[[i]]$SEASON <- season[i]
}
passing <- do.call("rbind", final_list)
passing <- passing[order(-passing$APG_adj) , ]
rownames(passing) <- 1:nrow(passing)
View(passing)
best.passer <- passing %>%
arrange(desc(APG_adj)) %>%
mutate(RANK = 1:nrow(passing)) %>%
group_by(PLAYER) %>%
filter(n()>=10) %>%
slice(1:10) %>%
summarise(RANK = toString(RANK),
SEASON = toString(SEASON),
GP = sum(GP),
AST = sum(AST),
APG = AST/GP,
AST_adj = sum(AST_adj),
APG_adj = AST_adj/GP,
EFF = sum(`PASS EFF`)) %>%
arrange(desc(APG_adj))
View(best.passer)
2019passers <- passing %>% filter(SEASON=="2018-19")
passing2019 <- passing %>% filter(SEASON=="2018-19")
View(passing2019)
rm(passing2019)
library(readxl)
library(dplyr)
num <- c("97", "98", "99", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19")
season <- c("1996-97", "1997-98", "1998-99", "1999-00", "2000-01", "2001-02", "2002-03", "2003-04", "2004-05", "2005-06", "2006-07", "2007-08",
"2008-09", "2009-10", "2010-11", "2011-12", "2012-13", "2013-14", "2014-15", "2015-16", "2016-17", "2017-18", "2018-19")
df.list <- vector("list", length(num))
names(df.list) <- num
seasonEff <- c()
for (i in 1:length(num)) {
trd <- read_excel(paste0("/Users/Akash/Documents/Data Science/",num[i],"_totals.xlsx"),
sheet = "traditional")
adv <- read_excel(paste0("/Users/Akash/Documents/Data Science/",num[i],"_totals.xlsx"),
sheet = "advanced")
adv <- adv %>% select(-MIN)
df <- merge(trd, adv, by = intersect(names(trd), names(adv)))
df <- df %>%
mutate(SEASON = season[i],
POSS = round((MIN/48) * PACE),
`POSS USED` = round(POSS * (`USG%`/100)),
`PTS PER POSS USED` = PTS/`POSS USED`)
for (n in 1:nrow(df)) {
df$lgEff[n] <- sum(df$PTS[-n])/sum(df$`POSS USED`[-n])
}
avgEff <- sum(df$PTS)/sum(df$`POSS USED`)
df$Diff <- df$PTS - df$`POSS USED` * df$lgEff
df$PTS_adj <- df$PTS + df$Diff
df$PPG_adj <- df$PTS_adj/df$GP
df$PPG <- df$PTS/df$GP
df.list[[i]] <- df
seasonEff <- c(seasonEff, avgEff)
}
rgdf <- do.call("rbind", df.list) %>% select(1,45,2:44,46:53)
rgfilter_df <- rgdf %>%
group_by(SEASON) %>%
filter(MIN > .2*max(MIN, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(PPG_adj))
View(rgdf)
View(rgfilter_df)
lakers_trd <- read_excel("~/Documents/Data Science/Lakers Reg Season Game Log.xlsx",
sheet = "2019trd")
lakers_trd <- read_excel("Users/Akash/Documents/Data Science/Lakers Reg Season Game Log.xlsx",
sheet = "2019trd")
lakers_trd <- read_excel("/Users/Akash/Documents/Data Science/Lakers Reg Season Game Log.xlsx",
sheet = "2019trd")
lakers_adv <- read_excel("/Users/Akash/Documents/Data Science/Lakers Reg Season Game Log.xlsx",
sheet = "2019trd")
lebron_trd <- read_excel("/Users/Akash/Documents/Data Science/LeBron Reg Season Game Log.xlsx")
lebron_trd <- read_excel("/Users/Akash/Documents/Data Science/LeBron Reg Season Game Log.xlsx", sheet = "trd")
lebron_trd <- read_excel("/Users/Akash/Documents/Data Science/LeBron Reg Season Game Log.xlsx", sheet = "traditional")
lebron_adv <- read_excel("Users/Akash/Documents/Data Science/LeBron Reg Season Game Log.xlsx", sheet = "advanced")
lebron_adv <- read_excel("/Users/Akash/Documents/Data Science/LeBron Reg Season Game Log.xlsx", sheet = "advanced")
plot(lebron_trd$PTS, lebron_trd$AST)
plot(log(lebron_trd$PTS), log(lebron_trd$AST))
plot(lebron_trd$PTS, lebron_trd$AST)
plot(log(lebron_trd$PTS), log(lebron_trd$AST))
plot(log(lebron_trd$PTS[lebron]), log(lebron_trd$AST))
plot(log(lebron_trd$PTS[lebron_trd$`GAME DATE`>="2019-10-01"]), log(lebron_trd$AST[lebron_trd$`GAME DATE`>="2019-10-01"]))
plot(lebron_trd$PTS[lebron_trd$`GAME DATE`>="2019-10-01"], lebron_trd$AST[lebron_trd$`GAME DATE`>="2019-10-01"])
View(lebron_trd)
plot(log(lebron_trd$PTS[lebron_trd$`GAME DATE`>="2018-10-01"]), log(lebron_trd$AST[lebron_trd$`GAME DATE`>="2018-10-01"]))
plot(lebron_trd$PTS[lebron_trd$`GAME DATE`>="2018-10-01"], lebron_trd$AST[lebron_trd$`GAME DATE`>="2018-10-01"])
lebron_df <- merge(lebron_trd, lebron_adv, by = names(lebron_trd)[1:5]) %>% select(-MIN.y)
View(lebron_df)
lebron_df <- merge(lebron_trd, lebron_adv, by = names(lebron_trd)[1:5]) %>% select(-MIN.y) %>% rename(MIN = MIN.x)
lebron_df_filtered <- lebron_df %>% filter(`GAME DATE` >= "2018-10-01")
`career_diff_W/L` <- lebron_df %>% group_by(`W/L`) %>% summarise_at(vars(MIN:PIE), funs(mean(., na.rm = TRUE)))
View(`career_diff_W/L`)
`lakers_diff_W/L` <- lebron_df_filtered %>% group_by(`W/L`) %>% summarise_at(vars(MIN:PIE), funs(mean(., na.rm = TRUE)))
View(`lakers_diff_W/L`)
`career_half_split` <- lebron_df %>%
mutate(which_half = ifelse(`GAME DATE` < "2011-10-01", "before", "after")) %>%
group_by(which_half) %>%
summarise_at(vars(MIN:PIE), funs(mean(., na.rm = TRUE)))
View(career_half_split)
80*17
lebron_df %>% group(`W/L`) %>% n()
lebron_df %>% group_by(`W/L`) %>% n()
lebron_df %>% group_by(`W/L`) %>% summarise(n())
View(lebron_df_filtered)
key_areas <- data.frame(matrix(NA, nrow = length(6:40), ncol = 2))
View(key_areas)
key_areas <- data.frame(matrix(NA, nrow = length(6:40), ncol = 3))
key_areas <- data.frame(matrix(NA, nrow = length(6:40), ncol = 2))
names(key_areas) <- c("WINS", "LOSSES")
rownames(key_areas) <- names(key_areas)[6:40]
rownames(key_areas) <- names(lebron_df_filtered)[6:40]
key_areas <- data.frame(matrix(NA, nrow = length(6:40), ncol = 4))
names(key_areas) <- c("WINS", "LOSSES", "DIFF", "P")
rownames(key_areas) <- names(lebron_df_filtered)[6:40]
lebron_laker_wins <- lebron_df_filtered %>% filter(`W/L`=='W')
lebron_laker_losses <- lebron_df_filtered %>% filter(`W/L`=='L')
t.test(lebron_laker_wins$DEFRTG, lebron_laker_losses$DEFRTG)
t.test(lebron_laker_wins$DEFRTG, lebron_laker_losses$DEFRTG)[1]
t.test(lebron_laker_wins$DEFRTG, lebron_laker_losses$DEFRTG)$statistic
t <- t.test(lebron_laker_wins$DEFRTG, lebron_laker_losses$DEFRTG)
t$estimate
unname(t$estimate[1])
unname(t$estimate[2])
t$p.value
for (i in 6:40) {
t <- t.test(lebron_laker_wins[,i], lebron_laker_losses[,i])
key_areas[i-5,1] <- unname(t$estimate[1])
key_areas[i-5,2] <- unname(t$estimate[2])
key_areas[i-5,3] <- key_areas[i-5,1] - key_areas[i-5,2]
key_areas[i-5,4] <- t$p.value
}
write.csv(key_areas, file = "/Users/Akash/Desktop/data.csv", row.names = FALSE)
write.csv(key_areas, file = "/Users/Akash/Desktop/data.csv")
View(`lakers_diff_W/L`)
View(`career_diff_W/L`)
lebron_df_filtered_scaled <- lebron_df_filtered %>% mutate_at(vars(6:40), scale(.))
lebron_df_filtered_scaled <- lebron_df_filtered %>% mutate_at(vars(MIN:PIE), scale(.))
lebron_df_filtered_scaled <- lebron_df_filtered %>% summarise_at(vars(MIN:PIE), scale(.))
lebron_df_filtered_scaled <- lebron_df_filtered %>%
mutate_at(vars(MIN:PIE), funs((. - mean(., na.rm=TRUE)) / sd(., na.rm=TRUE)))
View(lebron_df_filtered_scaled)
lebron_laker_wins <- lebron_df_filtered %>% filter(`W/L`=='W')
lebron_laker_losses <- lebron_df_filtered %>% filter(`W/L`=='L')
for (i in 6:40) {
t <- t.test(lebron_laker_wins[,i], lebron_laker_losses[,i])
key_areas[i-5,1] <- unname(t$estimate[1])
key_areas[i-5,2] <- unname(t$estimate[2])
key_areas[i-5,3] <- key_areas[i-5,1] - key_areas[i-5,2]
key_areas[i-5,4] <- t$p.value
}
View(key_areas)
lebron_laker_wins <- lebron_df_filtered_scaled %>% filter(`W/L`=='W')
lebron_laker_losses <- lebron_df_filtered_scaled %>% filter(`W/L`=='L')
for (i in 6:40) {
t <- t.test(lebron_laker_wins[,i], lebron_laker_losses[,i])
key_areas[i-5,1] <- unname(t$estimate[1])
key_areas[i-5,2] <- unname(t$estimate[2])
key_areas[i-5,3] <- key_areas[i-5,1] - key_areas[i-5,2]
key_areas[i-5,4] <- t$p.value
}
View(key_areas)
