group_by(SEASON, TEAM) %>%
slice(1:2) %>%
summarise(Players = toString(PLAYER), OFPG = sum(OFPG)) %>%
arrange(desc(OFPG))
westbrook_pred <- predict(westbrook_fit, data.frame(FGAPG = 17, TOPG = 7), interval = "predict", level = .95)
harden_pred <- predict(harden_fit, data.frame(FGAPG = 20, TOPG = 8), interval = "predict", level = .95)
playtypes <- c("Transition", "Isolation", "P&R BH", "P&R RM", "Post Up", "Spot Up", "Handoff", "Cut", "Off Screen", "Putbacks")
playtype_data <- vector("list", 10)
names(playtype_data) <- playtypes
for (i in 1:length(playtype_data)) {
playtype_data[[i]] <- read_excel("/Users/Akash/Documents/Data Science/NBA Year-by-year Player Playtype.xlsx", sheet = playtypes[i])
}
playtypes <- c("trs", "iso", "prb", "prr", "psu", "spu", "hdo", "cut", "osc", "ptb")
for (i in 1:length(playtype_data)) {
assign(paste0("tot_", playtypes[i]),
playtype_data[[i]] %>%
group_by(PLAYER) %>%
summarise(GP = sum(GP), POSS = sum(POSS), PTS = sum(PTS)) %>%
ungroup() %>%
mutate(PPP = PTS/POSS, EFF = NA)
)
}
for (i in 1:nrow(tot_cut)) {
tot_cut$EFF[i] <- tot_cut$PTS[i] - tot_cut$POSS[i] * (sum(tot_cut$PTS[-i])/sum(tot_cut$POSS[-i]))
tot_cut$PTS_adj <- (tot_cut$PTS + tot_cut$EFF)
tot_cut$PERCENTILE <- ecdf(tot_cut$PTS_adj)(tot_cut$PTS_adj)
tot_cut <- tot_cut %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_hdo)) {
tot_hdo$EFF[i] <- tot_hdo$PTS[i] - tot_hdo$POSS[i] * (sum(tot_hdo$PTS[-i])/sum(tot_hdo$POSS[-i]))
tot_hdo$PTS_adj <- (tot_hdo$PTS + tot_hdo$EFF)
tot_hdo$PERCENTILE <- ecdf(tot_hdo$PTS_adj)(tot_hdo$PTS_adj)
tot_hdo <- tot_hdo %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_hdo)) {
tot_hdo$EFF[i] <- tot_hdo$PTS[i] - tot_hdo$POSS[i] * (sum(tot_hdo$PTS[-i])/sum(tot_hdo$POSS[-i]))
tot_hdo$PTS_adj <- (tot_hdo$PTS + tot_hdo$EFF)
tot_hdo$PERCENTILE <- ecdf(tot_hdo$PTS_adj)(tot_hdo$PTS_adj)
tot_hdo <- tot_hdo %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_iso)) {
tot_iso$EFF[i] <- tot_iso$PTS[i] - tot_iso$POSS[i] * (sum(tot_iso$PTS[-i])/sum(tot_iso$POSS[-i]))
tot_iso$PTS_adj <- (tot_iso$PTS + tot_iso$EFF)
tot_iso$PERCENTILE <- ecdf(tot_iso$PTS_adj)(tot_iso$PTS_adj)
tot_iso <- tot_iso %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_osc)) {
tot_osc$EFF[i] <- tot_osc$PTS[i] - tot_osc$POSS[i] * (sum(tot_osc$PTS[-i])/sum(tot_osc$POSS[-i]))
tot_osc$PTS_adj <- (tot_osc$PTS + tot_osc$EFF)
tot_osc$PERCENTILE <- ecdf(tot_osc$PTS_adj)(tot_osc$PTS_adj)
tot_osc <- tot_osc %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_prb)) {
tot_prb$EFF[i] <- tot_prb$PTS[i] - tot_prb$POSS[i] * (sum(tot_prb$PTS[-i])/sum(tot_prb$POSS[-i]))
tot_prb$PTS_adj <- (tot_prb$PTS + tot_prb$EFF)
tot_prb$PERCENTILE <- ecdf(tot_prb$PTS_adj)(tot_prb$PTS_adj)
tot_prb <- tot_prb %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_prr)) {
tot_prr$EFF[i] <- tot_prr$PTS[i] - tot_prr$POSS[i] * (sum(tot_prr$PTS[-i])/sum(tot_prr$POSS[-i]))
tot_prr$PTS_adj <- (tot_prr$PTS + tot_prr$EFF)
tot_prr$PERCENTILE <- ecdf(tot_prr$PTS_adj)(tot_prr$PTS_adj)
tot_prr <- tot_prr %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_psu)) {
tot_psu$EFF[i] <- tot_psu$PTS[i] - tot_psu$POSS[i] * (sum(tot_psu$PTS[-i])/sum(tot_psu$POSS[-i]))
tot_psu$PTS_adj <- (tot_psu$PTS + tot_psu$EFF)
tot_psu$PERCENTILE <- ecdf(tot_psu$PTS_adj)(tot_psu$PTS_adj)
tot_psu <- tot_psu %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_ptb)) {
tot_ptb$EFF[i] <- tot_ptb$PTS[i] - tot_ptb$POSS[i] * (sum(tot_ptb$PTS[-i])/sum(tot_ptb$POSS[-i]))
tot_ptb$PTS_adj <- (tot_ptb$PTS + tot_ptb$EFF)
tot_ptb$PERCENTILE <- ecdf(tot_ptb$PTS_adj)(tot_ptb$PTS_adj)
tot_ptb <- tot_ptb %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_spu)) {
tot_spu$EFF[i] <- tot_spu$PTS[i] - tot_spu$POSS[i] * (sum(tot_spu$PTS[-i])/sum(tot_spu$POSS[-i]))
tot_spu$PTS_adj <- (tot_spu$PTS + tot_spu$EFF)
tot_spu$PERCENTILE <- ecdf(tot_spu$PTS_adj)(tot_spu$PTS_adj)
tot_spu <- tot_spu %>% arrange(desc(PERCENTILE))
}
for (i in 1:nrow(tot_trs)) {
tot_trs$EFF[i] <- tot_trs$PTS[i] - tot_trs$POSS[i] * (sum(tot_trs$PTS[-i])/sum(tot_trs$POSS[-i]))
tot_trs$PTS_adj <- (tot_trs$PTS + tot_trs$EFF)
tot_trs$PERCENTILE <- ecdf(tot_trs$PTS_adj)(tot_trs$PTS_adj)
tot_trs <- tot_trs %>% arrange(desc(PERCENTILE))
}
playtypes <- c("Transition", "Isolation", "P&R BH", "P&R RM", "Post Up", "Spot Up", "Handoff", "Cut", "Off Screen", "Putbacks")
westbrook_percentile <- round(c(tot_trs$PERCENTILE[tot_trs$PLAYER == "Russell Westbrook"],
tot_iso$PERCENTILE[tot_iso$PLAYER == "Russell Westbrook"],
tot_prb$PERCENTILE[tot_prb$PLAYER == "Russell Westbrook"],
tot_prr$PERCENTILE[tot_prr$PLAYER == "Russell Westbrook"],
tot_psu$PERCENTILE[tot_psu$PLAYER == "Russell Westbrook"],
tot_spu$PERCENTILE[tot_spu$PLAYER == "Russell Westbrook"],
tot_hdo$PERCENTILE[tot_hdo$PLAYER == "Russell Westbrook"],
tot_cut$PERCENTILE[tot_cut$PLAYER == "Russell Westbrook"],
tot_osc$PERCENTILE[tot_osc$PLAYER == "Russell Westbrook"],
tot_ptb$PERCENTILE[tot_ptb$PLAYER == "Russell Westbrook"]), 3) * 100
names(westbrook_percentile) <- playtypes <- c("Transition", "Isolation", "P&R BH", "Post Up", "Spot Up", "Handoff", "Cut", "Off Screen", "Putbacks")
harden_percentile <- round(c(tot_trs$PERCENTILE[tot_trs$PLAYER == "James Harden"],
tot_iso$PERCENTILE[tot_iso$PLAYER == "James Harden"],
tot_prb$PERCENTILE[tot_prb$PLAYER == "James Harden"],
tot_prr$PERCENTILE[tot_prr$PLAYER == "James Harden"],
tot_psu$PERCENTILE[tot_psu$PLAYER == "James Harden"],
tot_spu$PERCENTILE[tot_spu$PLAYER == "James Harden"],
tot_hdo$PERCENTILE[tot_hdo$PLAYER == "James Harden"],
tot_cut$PERCENTILE[tot_cut$PLAYER == "James Harden"],
tot_osc$PERCENTILE[tot_osc$PLAYER == "James Harden"],
tot_ptb$PERCENTILE[tot_ptb$PLAYER == "James Harden"]), 3) * 100
names(harden_percentile) <- playtypes <- c("Transition", "Isolation", "P&R BH", "Post Up", "Spot Up", "Handoff", "Cut", "Off Screen", "Putbacks")
rm(list = c("i", "playtypes", "season"))
westbrook_teammates_3PA <- as.numeric(player_df %>%
filter(SEASON %in% c("2017-18", "2018-19")) %>%
filter(TEAM == "OKC" & PLAYER != "Russell Westbrook") %>%
group_by(PLAYER) %>%
summarise_at(vars(GP:FGA,`3PM`:`3PA`,FTM:FTA,OREB:`+/-`, POSS:`POSS USED`), funs(sum(., na.rm = T))) %>%
summarise(`3PA PER POSS` = round(sum(`3PA`)/sum(POSS), 2), `3P%` = 100*round(sum(`3PM`)/sum(`3PA`), 3)))
names(westbrook_teammates_3PA) <- c("3PA PER POSS", "3P%")
harden_teammates_3PA <- as.numeric(player_df %>%
filter(SEASON %in% c("2017-18", "2018-19")) %>%
filter(TEAM == "HOU" & PLAYER != "James Harden") %>%
group_by(PLAYER) %>%
summarise_at(vars(GP:FGA,`3PM`:`3PA`,FTM:FTA,OREB:`+/-`, POSS:`POSS USED`), funs(sum(., na.rm = T))) %>%
summarise(`3PA PER POSS` = round(sum(`3PA`)/sum(POSS), 2), `3P%` = 100*round(sum(`3PM`)/sum(`3PA`), 3)))
names(harden_teammates_3PA) <- c("3PA PER POSS", "3P%")
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Man")
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
View(okc_lineups)
View(twoPlayer)
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T)))
View(okc_lineups)
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
View(twoPlayer)
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER MIN` = round(`+/-` / MIN, 3))
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS, TEAM) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER MIN` = round(`+/-` / MIN, 3))
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER MIN`))
View(duo_main)
219/3
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER MIN` = `+/-` / MIN)
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER MIN`)) %>%
mutate(round(`+/- PER MIN`, 3))
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER MIN`)) %>%
mutate(`+/- PER MIN` = round(`+/- PER MIN`, 3))
okc_lineups %>%
filter(grepl("Westbrook | Harden", LINEUPS))
View(okc_lineups %>%
filter(grepl("Westbrook | Harden", LINEUPS)))
View(okc_lineups %>%
filter(!grepl("Westbrook | Harden", LINEUPS)))
View(okc_lineups %>%
filter(!grepl("Westbrook & Harden", LINEUPS)))
View(okc_lineups %>%
filter(!grepl("Westbrook", LINEUPS) & !grepl("Harden", LINEUPS)))
rest_of_team <- okc_lineups %>%
filter(!grepl("Westbrook", LINEUPS) & !grepl("Harden", LINEUPS)) %>%
summarise(`+/- PER MIN` = sum(`+/-`) / sum(MIN))
View(rest_of_team)
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER 48 MIN` = 48*`+/-` / MIN)
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER MIN`)) %>%
mutate(`+/- PER MIN` = round(`+/- PER MIN`, 3))
rest_of_team <- okc_lineups %>%
filter(!grepl("Westbrook", LINEUPS) & !grepl("Harden", LINEUPS)) %>%
summarise(`+/- PER MIN` = 48*sum(`+/-`) / sum(MIN))
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER 48 MIN` = 48*`+/-` / MIN)
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER MIN`)) %>%
mutate(`+/- PER 48 MIN` = round(`+/- PER 48 MIN`, 1))
okc_lineups <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "5 Player")
twoPlayer <- read_excel("/Users/Akash/Documents/Data Science/Westbrook-Harden Lineups.xlsx", sheet = "2 Player")
okc_lineups <- okc_lineups %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
arrange(desc(MIN))
twoPlayer <- twoPlayer %>%
select(-c(`FG%`, `3P%`, `FT%`)) %>%
group_by(LINEUPS) %>%
summarise_at(vars(GP:`+/-`), funs(sum(., na.rm = T))) %>%
ungroup() %>%
mutate(`+/- PER 48 MIN` = 48*`+/-` / MIN)
duo_main <- twoPlayer %>%
filter(MIN >= 2000) %>%
arrange(desc(`+/- PER 48 MIN`)) %>%
mutate(`+/- PER 48 MIN` = round(`+/- PER 48 MIN`, 1))
rest_of_team <- okc_lineups %>%
filter(!grepl("Westbrook", LINEUPS) & !grepl("Harden", LINEUPS)) %>%
summarise(`+/- PER 48 MIN` = round(48*sum(`+/-`) / sum(MIN), 1))
View(duo_main)
View(tot_stats)
(13809+3746)/467
(11027+4171)/427
View(tot_touches)
3556/424
3533/466
View(okc_lineups)
View(duo_main)
View(rest_of_team)
View(tot_trs)
member_pcp_spans <- read.csv("~/Desktop/member_pcp_spans.csv", stringsAsFactors=FALSE)
View(member_pcp_spans)
member_pcp_spans <- read.csv("~/Desktop/member_pcp_spans.csv", stringsAsFactors=FALSE)
View(member_pcp_spans)
# Load packages
library(dplyr)
library(stringr)
View(member_pcp_spans)
# Change blanks to missing values
member_pcp_spans[member_pcp_spans==""] <- NA
str(member_pcp_spans)
# Change date values
member_pcp_spans[member_pcp_spans$start_date==999999 | member_pcp_spans$end_date==999999] <- 181231
# Change date values
member_pcp_spans[member_pcp_spans$start_date==999999 | member_pcp_spans$end_date==999999 , ] <- 181231
# Read data
member_pcp_spans <- read.csv("~/Desktop/member_pcp_spans.csv", stringsAsFactors=FALSE)
# Load packages
library(dplyr)
library(stringr)
# Change blanks to missing values
member_pcp_spans[member_pcp_spans==""] <- NA
member_pcp_spans$start_date==999999
# Change 999999 date values
member_pcp_spans <- member_pcp_spans %>%
mutate(start_date = ifelse(start_date==999999, 181231, start_date),
end_date = ifelse(end_date==999999, 181231, end_date))
View(member_pcp_spans)
as.Date(as.character(member_pcp_spans$start_date), format="%Y%m%d")
as.character(member_pcp_spans$start_date)
as.Date(as.character(member_pcp_spans$start_date))
as.Date(as.character(member_pcp_spans$start_date), format = "%y%m%d")
# Change date formats
member_pcp_spans <- member_pcp_spans %>%
mutate(start_date = as.Date(as.character(start_date), format = "%y%m%d"),
end_date = as.Date(as.character(end_date), format = "%y%m%d"))
member_pcp_spans$end_date[1] - member_pcp_spans$start_date[1]
as.numeric(member_pcp_spans$end_date[1] - member_pcp_spans$start_date[1])
round(50, -1)
round(505, -1)
round(506, -1)
# Obtain results
best_pcp <- member_pcp_spans %>%
# Obtain results
best_pcp <- member_pcp_spans %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = round(sum(as.numeric(end_date - start_date))))
View(best_pcp)
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = round(sum(as.numeric(end_date - start_date))))
15970/98
round(as.numeric(member_pcp_spans$end_date - member_pcp_spans$start_date), -1)
# Obtain results
best_pcp <- member_pcp_spans %>%
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1)/3))
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1)/3))
5270/98
5270/3
5270/12
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30))
527/88
527/98
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1))/30)
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30))
View(best_pcp)
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = toString(round(as.numeric(end_date - start_date), -1)/30))
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30))
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
avg_time = round(sum(round(as.numeric(end_date - start_date), -1)/30) / tot_members, 2))
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = round(mean(pcp_rating, na.rm = TRUE), 3),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
turnover_rate = round(former_members/tot_members, 3),
avg_time = round(sum(round(as.numeric(end_date - start_date), -1)/30) / tot_members, 2))
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = mean(pcp_rating, na.rm = TRUE),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
turnover_rate = former_members/tot_members,
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30) / tot_members,
score = avg_rating * sqrt(tot_members) * (1-turnover_rate) * sqrt(avg_time))
View(best_pcp)
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = mean(pcp_rating, na.rm = TRUE),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
turnover_rate = former_members/tot_members,
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30) / tot_members,
score = avg_rating * sqrt(tot_members) * (1-turnover_rate) * avg_time)
# Obtain results
best_pcp <- member_pcp_spans %>%
filter(!is.na(provider_id)) %>%
group_by(provider_id) %>%
summarise(provider_name = unique(provider_name),
provider_city = unique(provider_city),
avg_rating = mean(pcp_rating, na.rm = TRUE),
tot_members = length(unique(member_id)),
former_members = length(unique(member_id[end_date < "2018-12-31"])),
turnover_rate = former_members/tot_members,
avg_time = sum(round(as.numeric(end_date - start_date), -1)/30) / tot_members,
score = avg_rating * sqrt(tot_members) * (1-turnover_rate) * avg_time) %>%
mutate(avg_rating = round(avg_rating, 3),
turnover_rate = round(turnover_rate, 3),
avg_time = paste(as.character(round(avg_time, 2)), "months"),
score = round(score, 1)) %>%
arrange(desc(score))
source('~/Documents/Data Science/Rockets Deadly Duo.R', echo=TRUE)
View(touches)
View(tot_touches)
library(readxl)
install.packages("readxl")
install.packages("dplyr")
install.packages("stringr")
install.packages("ggplot2")
install.packages("plotly")
install.packages("data.table")
install.packages("data.table")
install.packages("plotly")
install.packages("shiny")
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(plotly)
library(shiny)
library(data.table)
install.packages("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
getActiveDocumentContext()$path
getActiveDocumentContext()$path
getwd()
setwd("~/Documents/Internship:Resume/Applications/BASKETBALL/Suns/Lineup Assessment Tool")
runApp()
install.packages("tidyverse")
runApp()
install.packages("DT")
runApp()
install.packages("rsconnect")
library(rsconnect)
deployApp()
